"""
üè• ChirurgIA - API de Pr√©diction M√©dicale
=========================================

Ce module fournit les fonctions principales pour utiliser les mod√®les
ChirurgIA en production ou pour de nouveaux patients.

Auteur: ChirurgIA ML Team
Version: 1.0.0
"""

import pandas as pd
import numpy as np
import pickle
import json
from typing import Dict, List, Tuple, Any
import warnings
warnings.filterwarnings('ignore')

class ChirurgIAPredictor:
    """
    Classe principale pour les pr√©dictions ChirurgIA
    
    G√®re les trois mod√®les principaux :
    1. Pr√©diction de mortalit√©
    2. Classification des causes de d√©c√®s
    3. Clustering de criticit√© des survivants
    """
    
    def __init__(self, models_path: str = "/home/victory/Documents/ChirurgIA/models/"):
        """
        Initialise le pr√©dicteur avec les mod√®les sauvegard√©s
        
        Args:
            models_path (str): Chemin vers le dossier des mod√®les
        """
        self.models_path = models_path
        self.models = {}
        self.scalers = {}
        self.metadata = {}
        
        # Chargement des mod√®les
        self._load_models()
    
    def _load_models(self):
        """Charge tous les mod√®les et leurs m√©tadonn√©es"""
        try:
            # 1. Mod√®le de pr√©diction de mortalit√©
            self._load_mortality_model()
            
            # 2. Mod√®le de classification des causes de d√©c√®s
            self._load_death_cause_model()
            
            # 3. Mod√®le de clustering des survivants
            self._load_clustering_model()
            
            print("‚úÖ Tous les mod√®les ChirurgIA charg√©s avec succ√®s")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement des mod√®les : {e}")
    
    def _load_mortality_model(self):
        """Charge le mod√®le de pr√©diction de mortalit√©"""
        try:
            # Mod√®le principal (√† impl√©menter selon le notebook 03)
            # self.models['mortality'] = pickle.load(open(f"{self.models_path}mortality_predictor.pkl", 'rb'))
            # self.scalers['mortality'] = pickle.load(open(f"{self.models_path}mortality_scaler.pkl", 'rb'))
            print("üìä Mod√®le de mortalit√© pr√™t")
        except:
            print("‚ö†Ô∏è Mod√®le de mortalit√© non trouv√©")
    
    def _load_death_cause_model(self):
        """Charge le mod√®le de classification des causes de d√©c√®s"""
        try:
            self.models['death_cause'] = pickle.load(open(f"{self.models_path}death_cause_classifier.pkl", 'rb'))
            self.scalers['death_cause'] = pickle.load(open(f"{self.models_path}death_cause_scaler.pkl", 'rb'))
            
            # M√©tadonn√©es
            with open(f"{self.models_path}death_cause_model_info.json", 'r') as f:
                self.metadata['death_cause'] = json.load(f)
            
            print("üîç Mod√®le de causes de d√©c√®s charg√©")
        except:
            print("‚ö†Ô∏è Mod√®le de causes de d√©c√®s non trouv√©")
    
    def _load_clustering_model(self):
        """Charge le mod√®le de clustering des survivants"""
        try:
            self.models['clustering'] = pickle.load(open(f"{self.models_path}survivors_clustering_model.pkl", 'rb'))
            self.scalers['clustering'] = pickle.load(open(f"{self.models_path}clustering_scaler.pkl", 'rb'))
            
            # M√©tadonn√©es
            with open(f"{self.models_path}clustering_metadata.json", 'r') as f:
                self.metadata['clustering'] = json.load(f)
                
            print("üéØ Mod√®le de clustering charg√©")
        except:
            print("‚ö†Ô∏è Mod√®le de clustering non trouv√©")
    
    def predict_mortality(self, patient_data: Dict) -> Dict[str, Any]:
        """
        Pr√©dit le risque de mortalit√© pour un patient
        
        Args:
            patient_data (dict): Donn√©es du patient
                Ex: {
                    'Temperature': 37.2,
                    'pH': 7.35,
                    'pO2': 85,
                    'Creatinine': 1.1,
                    ...
                }
        
        Returns:
            dict: {
                'risk_probability': float,  # Probabilit√© de d√©c√®s (0-1)
                'risk_level': str,          # 'FAIBLE', 'MOD√âR√â', '√âLEV√â', 'CRITIQUE'
                'confidence': float,        # Confiance du mod√®le
                'risk_factors': list        # Facteurs de risque identifi√©s
            }
        """
        if 'mortality' not in self.models:
            return {'error': 'Mod√®le de mortalit√© non disponible'}
        
        # TODO: Impl√©menter la pr√©diction de mortalit√©
        # selon le notebook 03
        
        return {
            'risk_probability': 0.15,  # Exemple
            'risk_level': 'MOD√âR√â',
            'confidence': 0.87,
            'risk_factors': ['Cr√©atinine √©lev√©e', 'pH anormal']
        }
    
    def predict_death_cause(self, patient_data: Dict) -> Dict[str, Any]:
        """
        Pr√©dit la cause probable de d√©c√®s pour un patient d√©c√©d√©
        
        Args:
            patient_data (dict): Donn√©es du patient d√©c√©d√© incluant
                les features textuelles et num√©riques
        
        Returns:
            dict: {
                'predicted_cause': str,     # Cause principale pr√©dite
                'probability': float,       # Probabilit√© de cette cause
                'all_probabilities': dict,  # Toutes les probabilit√©s
                'confidence': str           # 'HAUTE', 'MOYENNE', 'FAIBLE'
            }
        """
        if 'death_cause' not in self.models:
            return {'error': 'Mod√®le de causes de d√©c√®s non disponible'}
        
        try:
            # Pr√©paration des donn√©es (simplifi√©e pour l'exemple)
            # En r√©alit√©, il faudrait le preprocessing complet du notebook 04
            
            categories = self.metadata['death_cause']['categories']
            
            # Pr√©diction simul√©e
            predicted_idx = 0  # Index de la classe pr√©dite
            probabilities = [0.6, 0.2, 0.1, 0.05, 0.03, 0.02, 0.0]  # Exemple
            
            predicted_cause = categories[predicted_idx]
            confidence = 'HAUTE' if max(probabilities) > 0.5 else 'MOYENNE' if max(probabilities) > 0.3 else 'FAIBLE'
            
            return {
                'predicted_cause': predicted_cause,
                'probability': max(probabilities),
                'all_probabilities': dict(zip(categories, probabilities)),
                'confidence': confidence
            }
            
        except Exception as e:
            return {'error': f'Erreur de pr√©diction : {e}'}
    
    def predict_criticality(self, patient_data: Dict) -> Dict[str, Any]:
        """
        Pr√©dit le niveau de criticit√© post-op√©ratoire pour un survivant
        
        Args:
            patient_data (dict): Donn√©es biologiques du patient
        
        Returns:
            dict: {
                'cluster': int,             # Cluster assign√©
                'criticality_score': float, # Score de criticit√© (0-100)
                'severity_level': str,      # 'FAIBLE', 'MOD√âR√âE', '√âLEV√âE', 'CRITIQUE'
                'recommendations': list,    # Recommandations cliniques
                'monitoring_level': str     # Niveau de surveillance requis
            }
        """
        if 'clustering' not in self.models:
            return {'error': 'Mod√®le de clustering non disponible'}
        
        try:
            # R√©cup√©ration des seuils de criticit√© depuis les m√©tadonn√©es
            criticality_scores = self.metadata['clustering']['criticality_scores']
            
            # TODO: Impl√©menter la pr√©diction compl√®te selon le notebook 05
            
            # Simulation pour l'exemple
            cluster = 1
            score = 35.5
            
            # D√©termination du niveau de s√©v√©rit√©
            if score < 25:
                severity = 'FAIBLE'
                monitoring = 'Surveillance standard'
                recommendations = [
                    'Surveillance post-op√©ratoire standard',
                    'Mobilisation pr√©coce encourag√©e',
                    'Sortie selon protocole habituel'
                ]
            elif score < 50:
                severity = 'MOD√âR√âE'
                monitoring = 'Surveillance renforc√©e 24-48h'
                recommendations = [
                    'Surveillance renforc√©e pendant 24-48h',
                    'Monitoring continu des signes vitaux',
                    'R√©√©valuation quotidienne'
                ]
            elif score < 75:
                severity = '√âLEV√âE'
                monitoring = 'Soins intensifs'
                recommendations = [
                    'Surveillance intensive requise',
                    'Monitoring cardiaque et respiratoire',
                    'Bilans biologiques fr√©quents',
                    'Consultation sp√©cialis√©e si n√©cessaire'
                ]
            else:
                severity = 'CRITIQUE'
                monitoring = 'R√©animation'
                recommendations = [
                    'ADMISSION EN SOINS INTENSIFS',
                    'Monitoring multiparam√©trique continu',
                    'Support organique si n√©cessaire',
                    'R√©√©valuation multidisciplinaire'
                ]
            
            return {
                'cluster': cluster,
                'criticality_score': score,
                'severity_level': severity,
                'recommendations': recommendations,
                'monitoring_level': monitoring
            }
            
        except Exception as e:
            return {'error': f'Erreur de pr√©diction de criticit√© : {e}'}
    
    def analyze_patient_complete(self, patient_data: Dict, patient_status: str = 'unknown') -> Dict[str, Any]:
        """
        Analyse compl√®te d'un patient avec tous les mod√®les applicables
        
        Args:
            patient_data (dict): Donn√©es compl√®tes du patient
            patient_status (str): 'alive', 'deceased', 'unknown'
        
        Returns:
            dict: R√©sultats de toutes les analyses applicables
        """
        results = {
            'patient_id': patient_data.get('patient_id', 'unknown'),
            'analysis_timestamp': pd.Timestamp.now().isoformat(),
            'status': patient_status
        }
        
        # 1. Pr√©diction de mortalit√© (toujours applicable)
        if patient_status in ['alive', 'unknown']:
            results['mortality_prediction'] = self.predict_mortality(patient_data)
        
        # 2. Analyse des causes de d√©c√®s (si d√©c√©d√©)
        if patient_status == 'deceased':
            results['death_cause_analysis'] = self.predict_death_cause(patient_data)
        
        # 3. Analyse de criticit√© (si survivant)
        if patient_status == 'alive':
            results['criticality_analysis'] = self.predict_criticality(patient_data)
        
        return results

def load_predictor() -> ChirurgIAPredictor:
    """
    Fonction utilitaire pour charger rapidement le pr√©dicteur
    
    Returns:
        ChirurgIAPredictor: Instance du pr√©dicteur pr√™te √† utiliser
    """
    return ChirurgIAPredictor()

# Exemple d'utilisation
if __name__ == "__main__":
    print("üè• Test de l'API ChirurgIA")
    print("=" * 50)
    
    # Chargement du pr√©dicteur
    predictor = load_predictor()
    
    # Exemple de donn√©es patient
    exemple_patient = {
        'patient_id': 'TEST_001',
        'Temperature': 37.8,
        'pH': 7.32,
        'pO2': 78,
        'pCO2': 46,
        'HCO3': 23,
        'Lactate': 2.1,
        'Creatinine': 1.3,
        'WCC': 11.5,
        'HGB': 10.2,
        'PLT': 185,
        'Diagnosis': 'Appendectomy with complications',
        'Surgery': 'Laparoscopic appendectomy',
        'Problems': 'Post-operative infection',
        'Investigation': 'Blood cultures positive'
    }
    
    # Test des pr√©dictions
    print("\\nüéØ Test de pr√©diction de mortalit√©:")
    mortality_result = predictor.predict_mortality(exemple_patient)
    print(f"   Risque: {mortality_result.get('risk_level', 'N/A')}")
    
    print("\\nüîç Test de pr√©diction de cause de d√©c√®s:")
    death_cause_result = predictor.predict_death_cause(exemple_patient)
    print(f"   Cause probable: {death_cause_result.get('predicted_cause', 'N/A')}")
    
    print("\\nüìä Test d'analyse de criticit√©:")
    criticality_result = predictor.predict_criticality(exemple_patient)
    print(f"   Niveau: {criticality_result.get('severity_level', 'N/A')}")
    
    print("\\n‚úÖ Tests termin√©s")
